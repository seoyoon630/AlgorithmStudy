# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app"s APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Automatically convert third-party libraries to use AndroidX
android.enableJetifier=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official


##  CUSTOM
# If you¡¯re already using Gradle version 7, skip this section because it¡¯s enabled by default,
# but if you¡¯re stuck on version 6.7 (AGP versions 7 and 4.2), then you should manually enable file-system watching.
# It allows Gradle to store information about which tasks¡¯ inputs and outputs were changed between builds,
# so it can quickly figure out which ones to re-execute.
org.gradle.vfs.watch=true

# This is helpful for multi-module projects because it attempts to configure
# only modules that are relevant for the tasks you run instead of configuring your entire project for every task.
# However, it¡¯s currently still an incubating feature, so it might not work for your project.
org.gradle.configureondemand=true

# If you¡¯re working on a multi-module project, then forcing Gradle to execute tasks in parallel is also an easy performance gain.
# This works with the caveat that your tasks in different modules should be independent, and not access shared state, which you shouldn¡¯t be doing anyway.
#org.gradle.parallel=true

# This works by storing and reusing outputs produced by other builds if the inputs haven¡¯t changed.
# One feature of this is task output caching. It leverages Gradle¡¯s existing UP_TO_DATE checks,
# but instead of only reusing outputs from the most recent build on the same machine,
# it allows Gradle to reuse outputs from any earlier build in any location on the machine.
# When using a shared build cache for task output caching, this even works across developer machines and build agents,
# so you can share the same cache with your coworkers and your CI.
org.gradle.caching=true